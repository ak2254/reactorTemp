from datetime import datetime
from prefect import flow, task

@task
def process_sm_data(nipa_sm_data: list[dict], project_data: list[dict]) -> list[dict]:
    """Sync project_data into nipa_sm_data and update statuses."""
    today = datetime.now().strftime("%Y-%m-%d")
    updated_sm_data = nipa_sm_data.copy()

    # Create a lookup for easy matching by description
    sm_lookup = {item['description']: item for item in nipa_sm_data}

    for project in project_data:
        # Construct description key
        description = (
            f"{project['project']}{project['product name']}"
            f"{project['new/re-intro']}{project['location']}"
        )

        # Determine suite/area and due date
        suite_area = project.get('location')
        due_date = project.get('approval date')

        # If entry exists
        if description in sm_lookup:
            sm_entry = sm_lookup[description]

            # If engineering is True and not closed, close it
            if project.get('engineering') is True and sm_entry.get('status') != "Closed":
                sm_entry['status'] = "Closed"
                sm_entry['closed date'] = today
            # Otherwise, keep open
            elif project.get('engineering') is not True:
                sm_entry['status'] = "Open"

            # Update any relevant fields
            sm_entry['Due date'] = due_date
            sm_entry['suite/area'] = suite_area

        else:
            # Create a new record
            new_record = {
                "description": description,
                "request type": "AutoGenerated",
                "suite/area": suite_area,
                "status": "Closed" if project.get("engineering") else "Open",
                "Due date": due_date,
                "closed date": today if project.get("engineering") else None,
                "Assigned To": None,
                "Thaw/Botling date": project.get("thaw date"),
                "m-185 required": None,
            }
            updated_sm_data.append(new_record)
            sm_lookup[description] = new_record

    return updated_sm_data


@flow
def sync_nipa_sm_flow(nipa_sm_data: list[dict], project_data: list[dict]) -> list[dict]:
    """Prefect flow to synchronize SM and Project data."""
    return process_sm_data(nipa_sm_data, project_data)


if __name__ == "__main__":
    # Example data
    nipa_sm_data = [
        {
            "description": "ProjAXYZNewYork",
            "request type": "LabReq",
            "suite/area": "NewYork",
            "status": "Open",
            "Assigned To": "John",
            "Due date": "2025-10-25",
            "Thaw/Botling date": "2025-10-15",
            "closed date": None,
            "m-185 required": "Yes",
        }
    ]

    project_data = [
        {
            "project": "ProjA",
            "product name": "XYZ",
            "new/re-intro": "",
            "thaw date": "2025-10-15",
            "engineering": True,
            "approval date": "2025-10-22",
            "location": "NewYork",
        },
        {
            "project": "ProjB",
            "product name": "LMN",
            "new/re-intro": "ReIntro",
            "thaw date": "2025-10-20",
            "engineering": False,
            "approval date": "2025-10-25",
            "location": "Chicago",
        },
    ]

    result = sync_nipa_sm_flow(nipa_sm_data, project_data)
    for r in result:
        print(r)
